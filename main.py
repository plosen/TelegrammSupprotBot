import logging
import telebot
import sqlite3
import os
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "8142382126:AAGFi4UEy7OWvQEiU5RAnxN9A6vXj_GrtqI")
bot = telebot.TeleBot(TOKEN)

def get_db_connection():
    conn = sqlite3.connect("support_requests.db", check_same_thread=False)
    return conn, conn.cursor()



conn, cursor = get_db_connection()
cursor.execute('''CREATE TABLE IF NOT EXISTS requests (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 user_id INTEGER,
                 message TEXT,
                 department TEXT)''')


cursor.execute("PRAGMA table_info(requests)")
columns = [column[1] for column in cursor.fetchall()]

if 'timestamp' not in columns:
    cursor.execute("ALTER TABLE requests ADD COLUMN timestamp DATETIME")
    conn.commit()
    logging.info("–ö–æ–ª–æ–Ω–∫–∞ timestamp –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
    cursor.execute("UPDATE requests SET timestamp = datetime('now') WHERE timestamp IS NULL")
    conn.commit()
else:
    logging.info("–ö–æ–ª–æ–Ω–∫–∞ timestamp —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

conn.close()


FAQ = {
    "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?": "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –Ω–∞—à —Å–∞–π—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ '–ö–∞—Ç–∞–ª–æ–≥'.",
    "–ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?": "–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
    "–ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã?": "–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏.",
    "–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?": "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–æ—Ç –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–∞ —Å–∞–π—Ç–µ."
}

def save_request(user_id, message, department):
    try:
        conn, cursor = get_db_connection()
        cursor.execute("INSERT INTO requests (user_id, message, department) VALUES (?, ?, ?)",
                       (user_id, message, department))
        conn.commit()
        conn.close()
        logging.info(f"–ó–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {message} –≤ –æ—Ç–¥–µ–ª {department}")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def generate_main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üìã –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"))
    markup.add(KeyboardButton("üîß –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º–∏"), KeyboardButton("üì¶ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ç–¥–µ–ª–æ–º –ø—Ä–æ–¥–∞–∂"))
    markup.add(KeyboardButton("‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏"), KeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    markup.add(KeyboardButton("üîç –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞"))
    return markup

@bot.message_handler(commands=["start", "help"])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=generate_main_menu())

@bot.message_handler(func=lambda message: message.text == "üìã –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
def faq(message):
    response = "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
    for q, a in FAQ.items():
        response += f"\n*{q}*\n{a}\n"
    bot.send_message(message.chat.id, response, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "üì¶ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ç–¥–µ–ª–æ–º –ø—Ä–æ–¥–∞–∂")
def contact_sales(message):
    bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ—ë –≤ –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂.")

@bot.message_handler(func=lambda message: message.text == "üîß –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º–∏")
def contact_dev(message):
    bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ—ë –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º.")

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏")
def about_company(message):
    bot.send_message(message.chat.id, "–ú—ã ‚Äî –≤–µ–¥—É—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è –≤ —Å—Ñ–µ—Ä–µ –ø—Ä–æ–¥–∞–∂ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!")

@bot.message_handler(func=lambda message: message.text == "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
def support(message):
    bot.send_message(message.chat.id, "–ù–∞—à–∞ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å.")

@bot.message_handler(func=lambda message: message.text == "üîç –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞")
def check_request_status(message):
    conn, cursor = get_db_connection()
    cursor.execute("SELECT id, department, timestamp FROM requests WHERE user_id = ? ORDER BY timestamp DESC", (message.from_user.id,))
    requests = cursor.fetchall()
    conn.close()

    if not requests:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
    else:
        response = "–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n"
        for req in requests[:5]:
            response += f"\n*ID:* {req[0]} | *–û—Ç–¥–µ–ª:* {req[1]} | *–î–∞—Ç–∞:* {req[2]}"
        bot.send_message(message.chat.id, response, parse_mode="Markdown")

@bot.message_handler(func=lambda message: True)
def handle_request(message):
    department = "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã" if "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" in message.text.lower() else "–æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂"
    save_request(message.from_user.id, message.text, department)
    bot.send_message(message.chat.id, f"–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –≤ {department}.")

@bot.message_handler(commands=["requests"])
def view_requests(message):
    ADMIN_ID = 1489502411
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    conn, cursor = get_db_connection()
    cursor.execute("SELECT id, user_id, message, department, timestamp FROM requests")
    requests = cursor.fetchall()
    conn.close()

    if not requests:
        bot.send_message(message.chat.id, "–ó–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    response = "üìå *–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤:*\n"
    for req in requests:
        response += f"\nüìç *ID:* {req[0]}\nüë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {req[1]}\nüè¢ *–û—Ç–¥–µ–ª:* {req[3]}\nüì© *–ó–∞–ø—Ä–æ—Å:* {req[2]}\nüïí *–î–∞—Ç–∞:* {req[4]}\n"
    bot.send_message(message.chat.id, response, parse_mode="Markdown")

if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
